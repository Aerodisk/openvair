######
domain
######
Ядро модуля, хранящее в себе внутреннюю логику.

Здесь хранятся "Модели предметной области", объекты, выполняющие самые важные
операции проекта.

base.py
=======
Здесь, исходя из названия, хранятся базовые классы моделей (абстрактные классы), которые
далее реализуют свое поведение в поддоменах. В ходе разработки, необходимо
правильно реализовать последовательность наследований, для создания удобной
и понятной древовидной структуры моделей.

.. important::

    Не везде вам понадобится создавать сложную структуру наследования. Возможно,
    реализуемая предметная область просто не содержит в себе разнообразия
    моделей.

remotefs
========
Директория, содержащая в себе различные реализации базовой модели предметной области.

model.py
========
В данной реализации в этом файле находится фабрика, предоставляющая нужную модель
предметной области из поддомена в зависимости от полученных данных.

Если ваша предметная область не предполагает наличия нескольких моделей,
разместите здесь вашу модель предметной области, которую здесь же можно
проинициализировать, затем использовать ее методы.

manager.py
==========
Это файл, который, по сути, является демоном, который инициирует "сервер"
для общения приема сообщений в очереди ядра модуля.

Просто передайте имя очереди для ядра в аргумент "queue_name" и модель,
которая будет работать в ядре в "manager". В данном случае, из-за вариативности
"модельного ряда" в качестве менеджера передана фабрика, функция, которой
предоставить нужную модель.

.. code-block:: python

    if __name__ == '__main__':
        LOG.info('Starting RPCServer for consuming')
        Protocol(server=True)(
            queue_name=SCHEDULER_CORE_QUEUE_NAME,
            manager=model.StorageFactory(),
        )
