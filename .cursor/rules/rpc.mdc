---
description: 
globs: 
alwaysApply: true
---
### Подробное описание работы RPC

RPC (Remote Procedure Call) — это механизм, который позволяет программам вызывать функции или процедуры, находящиеся на удаленных серверах, как если бы они были локальными. В контексте вашего приложения, RPC используется для взаимодействия между различными модулями через очередь сообщений RabbitMQ.

#### Основные компоненты RPC

1. **RPC Client**: Отправляет запросы на удаленный сервер и ожидает ответа.
2. **RPC Server**: Обрабатывает входящие запросы и возвращает результаты клиенту.
3. **RabbitMQ**: Используется как транспортный уровень для передачи сообщений между клиентом и сервером.

### Методы `call` и `cast`

#### Метод `call`

Метод `call` используется для отправки запроса на сервер и ожидания ответа. Он реализован в классе `RabbitRPCClient` и имеет следующий интерфейс:

```python
def call(
    self,
    method_name: str,
    data_for_method: Optional[Dict] = None,
    data_for_manager: Optional[Dict] = None,
    *,
    priority: int = 1,
    time_limit: int = 100,
) -> Any:
```

**Параметры:**
- `method_name`: Имя метода, который будет вызван на сервере.
- `data_for_method`: Данные, которые будут переданы в метод.
- `data_for_manager`: Дополнительные данные для инициализации менеджера.
- `priority`: Приоритет сообщения (по умолчанию 1).
- `time_limit`: Время ожидания ответа (по умолчанию 100 мс).

**Процесс работы:**
1. **Сериализация данных**: Данные, переданные в метод, сериализуются в JSON-формат.
2. **Отправка сообщения**: Сообщение отправляется в очередь RabbitMQ с указанием имени метода и данных.
3. **Ожидание ответа**: Клиент ожидает ответа от сервера, обрабатывая события в течение заданного времени.
4. **Обработка ответа**: Если ответ получен, он десериализуется и возвращается клиенту. Если произошла ошибка, выбрасывается исключение.

#### Метод `cast`

Метод `cast` используется для отправки запроса на сервер без ожидания ответа. Он также реализован в классе `RabbitRPCClient` и имеет следующий интерфейс:

```python
def cast(
    self,
    method_name: str,
    data_for_method: Optional[Dict] = None,
    data_for_manager: Optional[Dict] = None,
    *,
    priority: int = 10,
) -> None:
```

**Параметры:**
- `method_name`: Имя метода, который будет вызван на сервере.
- `data_for_method`: Данные, которые будут переданы в метод.
- `data_for_manager`: Дополнительные данные для инициализации менеджера.
- `priority`: Приоритет сообщения (по умолчанию 10).

**Процесс работы:**
1. **Сериализация данных**: Данные сериализуются в JSON-формат.
2. **Отправка сообщения**: Сообщение отправляется в очередь RabbitMQ с указанием имени метода и данных.
3. **Нет ожидания ответа**: В отличие от метода `call`, `cast` не ожидает ответа от сервера, что позволяет отправлять сообщения асинхронно.

### Заключение

RPC в вашем приложении реализует эффективный механизм взаимодействия между модулями, позволяя им вызывать методы друг друга через очередь сообщений RabbitMQ. Методы `call` и `cast` обеспечивают гибкость в обработке запросов, позволяя как ожидать ответ, так и отправлять сообщения без ожидания. Это позволяет строить масштабируемые и производительные системы.
